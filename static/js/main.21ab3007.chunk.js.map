{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","bluetooth","requestDevice","filters","services","then","device","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","data","Uint8Array","writeValue","catch","error","console","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,8KCyB5BC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCAFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAEhCC,UAAUC,UAAUC,cAAc,CAChCC,QAAS,CAAC,CAAEC,SAAU,CAAC,UAEtBC,MAAK,SAASC,GAEb,OAAOA,EAAOC,KAAKC,aAEpBH,MAAK,SAASI,GAEb,OAAOA,EAAOC,kBAAkB,SAEjCL,MAAK,SAASM,GAEb,OAAOA,EAAQC,kBAAkB,SAElCP,MAAK,SAASQ,GAEb,IAAIC,EAAO,IAAIC,WAAW,CAAC,IAAM,GAAM,EAAM,KAC7C,OAAOF,EAAeG,WAAWF,MAElCG,OAAM,SAASC,GAEbC,QAAQD,MAAM,qBAAsBA,MAEvClB,UAAUoB,cACPC,SAASvB,GACTO,MAAK,SAAAiB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf3B,UAAUoB,cAAcQ,YAI1BT,QAAQU,IACN,iHAKE9B,GAAUA,EAAO+B,UACnB/B,EAAO+B,SAASR,KAMlBH,QAAQU,IAAI,sCAGR9B,GAAUA,EAAOgC,WACnBhC,EAAOgC,UAAUT,WAO5BL,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MCnHjEc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBrC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqC,IAAIC,aAAwB7C,OAAOC,SAASN,MACpDmD,SAAW9C,OAAOC,SAAS6C,OAIvC,OAGF9C,OAAO+C,iBAAiB,QAAQ,WAC9B,IAAM1C,EAAK,UAAMwC,aAAN,sBAEP/C,IAyFV,SAAiCO,EAAOC,GAEtC0C,MAAM3C,EAAO,CACX4C,QAAS,CAAE,iBAAkB,YAE5BrC,MAAK,SAAAsC,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/C,UAAUoB,cAAc4B,MAAM3C,MAAK,SAAAiB,GACjCA,EAAa2B,aAAa5C,MAAK,WAC7BZ,OAAOC,SAASwD,eAKpBrD,EAAgBC,EAAOC,MAG1BkB,OAAM,WACLE,QAAQU,IACN,oEAhHAsB,CAAwBrD,EAAOC,GAI/BC,UAAUoB,cAAc4B,MAAM3C,MAAK,WACjCc,QAAQU,IACN,iHAMJhC,EAAgBC,EAAOC,OClC/BqB,K","file":"static/js/main.21ab3007.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  // Step 1: Scan for a device with 0xffe5 service\nnavigator.bluetooth.requestDevice({\n  filters: [{ services: [0x1801] }]\n})\n  .then(function(device) {\n    // Step 2: Connect to it\n    return device.gatt.connect();\n  })\n  .then(function(server) {\n    // Step 3: Get the Service\n    return server.getPrimaryService(0x1801);\n  })\n  .then(function(service) {\n    // Step 4: get the Characteristic\n    return service.getCharacteristic(0x1801);\n  })\n  .then(function(characteristic) {\n    // Step 5: Write to the characteristic\n    var data = new Uint8Array([0xbb, 0x25, 0x05, 0x44]);\n    return characteristic.writeValue(data);\n  })\n  .catch(function(error) {\n     // And of course: error handling!\n     console.error('Connection failed!', error);\n  });\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}